#!/usr/bin/env python3 
# -*- coding: utf-8 -*-

"""
Copyright 2019 - [*] sys4 AG

Author: Klaus Tachtler <k@sys4.de>
"""

import os
import sys
import tempfile
import datetime
import collections

from tld import get_fld

from argparse import ArgumentParser
from argparse import RawDescriptionHelpFormatter

__all__ = []
__version__ = 0.1
__date__ = '2019-09-19'
__updated__ = '2019-09-24'
__author__ = 'Klaus Tachtler <k@sys4.de>'
__organisation__ = '[*] sys4 AG'

__DEBUG__ = False

__infile__ = None
__outfile__ = None
__statsfile__ = None

__charCount__ = 30
__keyvalueFormat__ = "{:29}: {:1}"


class CLIError(Exception):
    '''Generic exception to raise and log different fatal errors.'''

    def __init__(self, msg):
        super(CLIError).__init__(type(self))
        self.msg = "E: %s" % msg

    def __str__(self):
        return self.msg

    def __unicode__(self):
        return self.msg


def CLIParser(argv=None): 
    '''Command line options.'''
    
    if argv is None:
        argv = sys.argv
    else:
        sys.argv.extend(argv)

    program_name = os.path.basename(sys.argv[0])
    program_version = '''v %s
  Copyright (c) [*] sys4 AG. All Rights Reserved.
  Klaus Tachtler <k@sys4.de>
  https://sys4.de''' % __version__
    program_build_date = str(__updated__)
    program_version_message = '%%(prog)s (%s) %s' % (program_build_date, program_version,)
    program_shortdesc = '''%s\n
  Program for the compression of log files, collected by the program
  godnsrblbench, for the creation of a compressed output file and
  optional a RBL statistic report file, in a certain output format,
  for the creation of statistics.    
''' % (__import__('__main__').__doc__.split("\n")[1])
    program_license = '''%s

  Created by %s on %s.
  Copyright (c) %s. All rights reserved.

  GNU GENERAL PUBLIC LICENSE
  Version 3, 29 June 2007

  Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>
  Everyone is permitted to copy and distribute verbatim copies
  of this license document, but changing it is not allowed.
         
  https://www.gnu.org/licenses/gpl-3.0.txt
 
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
  implied. See the License for the specific language governing
  permissions and limitations under the License.

  Distributed on an "AS IS" basis without warranties
  or conditions of any kind, either express or implied.

USAGE
''' % (program_shortdesc, __author__, str(__date__), __organisation__)

    def exceptionHandler(exception_type, exception, traceback, debug_hook=sys.excepthook):
        if __DEBUG__:
            debug_hook(exception_type, exception, traceback)
        else:
            parser.print_usage()
            sys.stderr.write("%s: %s\n\n" % (exception_type.__name__, exception))
            sys.exit(9)
            
    sys.excepthook = exceptionHandler

    def outError(textKey, textValue):
        parser.print_help()
        sys.stderr.write("\nERROR:  " + str(textKey) % str(textValue))
        sys.exit(0)

    try:
        # Setup argument parser        
        parser = ArgumentParser(description=program_license, formatter_class=RawDescriptionHelpFormatter)
        optional = parser._action_groups.pop()
        required = parser.add_argument_group('required arguments')
        required.add_argument('-i', '--inputfile',
                              action='store',
                              nargs=1,
                              default=None,
                              type=str,
                              required=True,
                              help='Input file with statistic data generated by godnsrblbench',
                              metavar='[FILE]',
                              dest='infile')
        required.add_argument('-o', '--outputfile',
                              action='store',
                              nargs=1,
                              default=None,
                              type=str,
                              required=True,
                              help='Output file for compressed data',
                              metavar='[FILE]',
                              dest='outfile')                  
        parser._action_groups.append(optional)
        optional.add_argument('-s', '--statsfile',
                              action='store',
                              nargs=1,
                              default=None,
                              type=str,
                              required=False,
                              help='Statistics file about the seen RBL and their use',
                              metavar='[FILE]',
                              dest='statsfile')
        optional.add_argument('-v', '--version',
                              action='version',
                              version=program_version_message)
        optional.add_argument('-d', '--debug',
                              action='store_true',
                              help='enable the DEBUG mode.',
                              dest='debug')

        # Process arguments
        args = parser.parse_args()

        # DEBUG mode was enabled.
        if args.debug:
            global __DEBUG__; __DEBUG__ = True; 

        # Check argument -i, --inputfile.  
        if os.path.isdir(str(args.infile[0])):
            raise Exception("Required -i, --inputfile [FILE] file {} is a directory.".format(args.infile[0]))        
        
        if not os.path.exists(str(args.infile[0])):
            raise Exception("Required -i, --inputfile [FILE] file {} not found!".format(args.infile[0]))

        global __infile__; __infile__ = args.infile[0]

        # Check argument -o, --outputfile.  
        if os.path.isdir(str(args.outfile[0])):
            raise Exception("Required -o, --outputfile [FILE] file {} is a directory.".format(args.outfile[0]))
        
        if os.path.exists(str(args.outfile[0])):
            print("Required -o, --outputfile [FILE] file {} already exists!".format(args.outfile[0]))
        
            answer = None
            while (answer == None):
                answer = input("Do you want to override the output file? (Enter YES): ").strip()
            if answer != "YES":
                print("The program was terminated in order NOT to overwrite the existing output file!")
                sys.exit(0)
                
            try:
                os.remove(args.outfile[0])
            except FileNotFoundError:
                raise Exception("Required -o, --outputfile [FILE] fis not Noneile {} could NOT be deleted!".format(args.outfile[0]))
        
        global __outfile__; __outfile__ = args.outfile[0]  

        # Check argument -s, --statsfile, ONLY if it was set.  
        if args.statsfile is not None:
        
            if os.path.isdir(str(args.statsfile[0])):
                raise Exception("Optional -s, --statsfile [FILE] file {} is a directory.".format(args.statsfile[0]))
            
            if os.path.exists(str(args.statsfile[0])):
                print("Optional -s, --statsfile [FILE] file {} already exists!".format(args.statsfile[0]))
            
                answer = None
                while (answer == None):
                    answer = input("Do you want to override the statistic file? (Enter YES): ").strip()
                if answer != "YES":
                    print("The program was terminated in order NOT to overwrite the existing statistic file!")
                    sys.exit(0)
                    
                try:
                    os.remove(args.statsfile[0])
                except FileNotFoundError:
                    raise Exception("Optional -s, --statsfile [FILE] file {} could NOT be deleted!".format(args.statsfile[0]))
            
            global __statsfile__; __statsfile__ = args.statsfile[0] 
                
        return 0
    except KeyboardInterrupt:
        ### handle keyboard interrupt ###
        return 0
    except Exception as e:
        raise(e)
        indent = len(program_name) * " "
        sys.stderr.write(program_name + ": " + repr(e) + "\n")
        sys.stderr.write(indent + "  for help use --help")
        return 2


def DNSRBLParser():
    '''
    Superstructure of a LOG-Line:
    ============================
    
    Timestamp Host Program[PID]: Date Time Answer: (ID) Request,Result,Nameserver:Port,Duration
    Jun 24 11:30:19 echo dnsrblbench[28303]: 2019/06/24 11:30:19 Answer: (aa38d81e) 62.220.91.181.rpdns.net,--,23.61.199.66:53,0.132522

    Col 01:    Timestamp          Jun 24 11:30:19
    Col 02:    Host               echo
    Col 03:    Program[PID]:      dnsrblbench[28303]:
    Col 04:    Date               2019/06/24
    Col 05:    Time               11:30:19
    Col 06:    Answer: (ID)       Answer: (aa38d81e)
    Col 07:    Request            62.220.91.181.rpdns.net
    Col 08:    Result             --
    Col 09:    Nameserver:Port    23.61.199.66:53
    Col 10:    Duration           0.132522

    '''
    # Create temporary folder inside OS temp directory.
    with tempfile.TemporaryDirectory() as tmpDirName:
    # DEV: tmpDirName = '/tmp/test'
    # DEV: os.mkdir(tmpDirName, 0o2740)
    
        # Open -i, --inputfile. 
        with open(__infile__,
                  mode='rt',
                  buffering=-1,
                  encoding="UTF-8",
                  errors='strict',
                  newline='\n',
                  closefd=True,
                  opener=None) as inputFile:
        
            # Iterate over -i, --inputfile. 
            for line in inputFile:
                array = line.rstrip('\n').split()
                
                # Do NOT use lines WITHOUT "Answer:".
                # Do NOT use EMPTY lines.
                if not "Answer:" in array:
                    continue
                elif len(array) == 0:
                    continue
                else:
                    
                    if __DEBUG__:
                        print('=' * __charCount__);
                        print(__keyvalueFormat__.format("DEBUG - array", str(array)))
                        
                    # ID with deleted brackets at start and end of string.
                    my_id = array[8].replace('(', '').replace(')', '')
                    
                    if __DEBUG__:
                        print(__keyvalueFormat__.format('DEBUG - my_id', my_id))
                    
                    # Create temporary file name with "tempdirname/my_id" as file name.
                    tempFileName = '%s/%s' % (tmpDirName, my_id)
                    
                    # Check if temporary file already exists. IF NOT create it, else open to append.
                    if not os.path.exists(tempFileName):
                        with open(tempFileName,
                                  mode='x+t',
                                  buffering=-1,
                                  encoding="UTF-8",
                                  errors='strict',
                                  newline='\n',
                                  closefd=True,
                                  opener=None) as tempFile:
    
                            # Hostname.
                            my_host = array[3]
                            
                            if __DEBUG__:
                                print(__keyvalueFormat__.format('DEBUG - my_host', my_host))
                            
                            # Date and time in ISO_8601.
                            tmp_datetime = '%s %s' % (array[5], array[6])
                            datetime_object = datetime.datetime.strptime(tmp_datetime, '%Y/%m/%d %H:%M:%S')
                            my_datetime = datetime_object.replace(tzinfo=datetime.timezone.utc).isoformat()
                            
                            if __DEBUG__:
                                print(__keyvalueFormat__.format('DEBUG - my_datetime', my_datetime))           
                            
                            # Result string.
                            my_result = array[9].replace(":", ",")      
                            
                            if __DEBUG__:
                                print(__keyvalueFormat__.format('DEBUG - my_result', my_result)) 
                            
                            # Write to file.
                            my_write = '%s,%s,%s,%s' % (my_datetime, my_id, my_host, my_result)
                            tempFile.write(my_write)
                            
                            if __DEBUG__:
                                print('-' * __charCount__);
                                print(__keyvalueFormat__.format('DEBUG - my_write', my_write))                         
                            
                            tempFile.close()
                    else:   
                        with open(tempFileName,
                                  mode='a+t',
                                  buffering=-1,
                                  encoding="UTF-8",
                                  errors='strict',
                                  newline='\n',
                                  closefd=True,
                                  opener=None) as tempFile:
                            
                            # Result string.
                            my_result = array[9].replace(":", ",")     
                            
                            if __DEBUG__:
                                print(__keyvalueFormat__.format('DEBUG - my_result', my_result))                        
                            
                            # Write to file.
                            my_write = ',%s' % (my_result)
                            tempFile.write(my_write)  
                                                  
                            if __DEBUG__:
                                print('-' * __charCount__);
                                print(__keyvalueFormat__.format('DEBUG - my_write', my_write))
                            
                            tempFile.close()          
            
        inputFile.close()
        
        # Determine all created temporary files inside the temporary directory "tmpDirName".
        try:                
            tempDirFiles = os.listdir(tmpDirName)
        except FileNotFoundError:
            raise Exception("Temporary directory {} not found!".format(tmpDirName))
        
        if __DEBUG__:
            print('*' * __charCount__);
            print(__keyvalueFormat__.format('DEBUG - tempdirfiles', str(tempDirFiles)))
            print('*' * __charCount__);
        
        # Create the -o, --outputfile.
        with open(__outfile__,
              mode='x+t',
              buffering=-1,
              encoding="UTF-8",
              errors='strict',
              newline='\n',
              closefd=True,
              opener=None) as outFile:
            
            # Write a headline to the -o, --outputfile at first line.
            outFile.write('Timestamp,ID,Hostname,Durationsummary,Durationaverage,Requestcounter\n')
    
            # Init RBL statistic counter.
            stats_rbl_count = {}
            stats_rbl_duration_sum = {} 
    
            # Iterate over every single temporary file.
            for tempFileRead in tempDirFiles: 
                
                if __DEBUG__:
                    print(__keyvalueFormat__.format('DEBUG - tempFileRead', tempFileRead))
                
                # Create temporary file name with "tempdirname/my_id" as file name.
                tempPathFileRead = '%s/%s' % (tmpDirName, tempFileRead)
        
                if __DEBUG__:
                    print(__keyvalueFormat__.format('DEBUG - tempPathFileRead', tempPathFileRead))              
                
                # Open actual temporary file.
                with open(tempPathFileRead,
                          mode='rt',
                          buffering=-1,
                          encoding="UTF-8",
                          errors='strict',
                          newline='\n',
                          closefd=True,
                          opener=None) as tempFileReadItems: 
                    
                    # Read the line with the compressed data.
                    tempArray = tempFileReadItems.readline().rstrip('\n').split(',')
                    
                    if __DEBUG__:
                        print(__keyvalueFormat__.format('DEBUG - tempArray', str(tempArray)))
                
                    # Timestamp.
                    tmp_timestamp = tempArray[0]
                    
                    # ID
                    tmp_id = tempArray[1]
                    
                    # Host
                    tmp_host = tempArray[2]
                    
                    # Iterate from 3 entry to the end in step 5 items
                    unsortedList = []
                    my_duration_sum = 0
                    my_request_counter = 0
                    for item in range(3, len(tempArray), 5):
                        
                        # Create sortable result list.
                        unsortedList.append('%s,%s,%s,%s,%s' % (tempArray[item],
                                                                tempArray[item + 1],
                                                                tempArray[item + 2],
                                                                tempArray[item + 3],
                                                                tempArray[item + 4]))
                        
                        # Add new filed with the summary of the all the DNSRBL duration.
                        try:
                            my_duration_sum += float(tempArray[item + 4]) 
                        except:
                            raise Exception("Detected duration {} is NOT a valid float number!".format(tempArray[item + 4]))
                        
                        if __DEBUG__:
                            print(__keyvalueFormat__.format('DEBUG - duration', tempArray[item + 4]))                        
                        
                        # Count the requests.
                        my_request_counter += 1

                        if __DEBUG__:
                            print(__keyvalueFormat__.format('DEBUG - my_request_counter', str(my_request_counter))) 
                            
                        # Count requested URL domin.tld and the summary of the duration per domin.tld.
                        if not get_fld(tempArray[item], fix_protocol=True) in stats_rbl_count:
                            stats_rbl_count[get_fld(tempArray[item], fix_protocol=True)] = 1
                            stats_rbl_duration_sum[get_fld(tempArray[item], fix_protocol=True)] = float(tempArray[item + 4])
                        else:
                            stats_rbl_count[get_fld(tempArray[item], fix_protocol=True)] += 1
                            stats_rbl_duration_sum[get_fld(tempArray[item], fix_protocol=True)] += float(tempArray[item + 4])
                                
                    if __DEBUG__:
                        print(__keyvalueFormat__.format('DEBUG - stats_rbl_count', str(stats_rbl_count)))
                        
                    if __DEBUG__:
                        print(__keyvalueFormat__.format('DEBUG - stats_rbl_duration_sum', str(stats_rbl_duration_sum)))
                         
                    if __DEBUG__:
                        print(__keyvalueFormat__.format('DEBUG - my_duration_sum', str(my_duration_sum))) 
                    
                    # Determine the duration average.
                    if my_duration_sum > 0 and my_request_counter > 0:
                        my_duration_avg = my_duration_sum / my_request_counter
                    else:
                        my_duration_avg = 0
                        
                    if __DEBUG__:
                        print(__keyvalueFormat__.format('DEBUG - my_duration_avg', str(my_duration_avg)))                         
                        
                    if __DEBUG__:
                        print(__keyvalueFormat__.format('DEBUG - unsortedList', str(unsortedList)))
                    
                    # Sort the list.
                    sortList = sorted(unsortedList)
                    
                    if __DEBUG__:
                        print(__keyvalueFormat__.format('DEBUG - sortList', str(sortList)))
                
                    # Write to -o, --outputfile.
                    outLine = '%s,%s,%s,%s,%s,%s,%s\n' % (tmp_timestamp,
                                                          tmp_id,
                                                          tmp_host,
                                                          my_duration_sum,
                                                          my_duration_avg,
                                                          my_request_counter,
                                                          str(sortList)
                                                          .replace("'", '')
                                                          .replace('[', '')
                                                          .replace(']', '')
                                                          .replace(' ', ''))
                    outFile.write(outLine)
                    
                    if __DEBUG__:
                        print(__keyvalueFormat__.format('DEBUG - outLine', outLine))
                
                tempFileReadItems.close()  
                    
        outFile.close()
        
        print("\nThe -o, --outputfile %s was successfully generated and written!\n" % __outfile__)
        
        # Write a statistic file if -s, --statsfile are specified.
        if __statsfile__ != None:
            # Create the -s, --statsfile.
            with open(__statsfile__,
                  mode='x+t',
                  buffering=-1,
                  encoding="UTF-8",
                  errors='strict',
                  newline='\n',
                  closefd=True,
                  opener=None) as statsFile:
            
                #  Write a headline to the -s, --statsfile at first line.
                statsFile.write('RBL-Seen,RBL-Count,RBL-Durationsummary,RBL-Durationaverage\n')
                
                # Sort the statistic RBL result by key (alphabetical sorting of the RBL).
                stats_rbl_count_sorted = collections.OrderedDict(sorted(stats_rbl_count.items()))
                
                for rbl, count in stats_rbl_count_sorted.items():
                    statsLine = ('%s,%s,%s,%s\n' % (rbl,
                                             count,
                                             stats_rbl_duration_sum[rbl],
                                             str(float(stats_rbl_duration_sum[rbl]) / float(count))))
                    
                    # Write statistic data to the -s, --statsfile.
                    statsFile.write(statsLine)
                    
                    if __DEBUG__:
                        print(__keyvalueFormat__.format('DEBUG - statsLine', statsLine))  
            
                statsFile.close()
                
                print("The -s, --statsfile %s was successfully generated and written!\n" % __statsfile__)
        
    return 0


def main():    
    if CLIParser() != 0:
        sys.stderr.write("\nERROR:  An error has occurred at the CLIParser() and the program has been terminated!")
        sys.exit(9)
    
    if DNSRBLParser() != 0:
        sys.stderr.write("\nERROR:  An error has occurred at the DNSRBLParser() and the program has been terminated!")
        sys.exit(9)


if __name__ == '__main__':
    main()
